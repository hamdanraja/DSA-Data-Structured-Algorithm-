#include<iostream>
using namespace std;
class doubleCircularQueue
{

	private:
		double *queueArray;
		int queuesize;
		int front;
		int rear;
	public:
	doubleCircularQueue(int size)
	{
		queueArray=new double(size);//double[size]
		queuesize=size;
		front=-1;
		rear=-1;
	}
	~doubleCircularQueue()
	{
		delete []queueArray;
		}	
		bool isFull()
		{
			if(rear == 0 && rear== queuesize-1 || front==rear+1)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		bool isEmpty()
		{
			if(front==-1 && rear==-1)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		void ENQUEUE(double value)
		{
			if(isFull())
			{
				cout<<"Queue is full :"<<endl;
			}
			else
			{
				if(front==-1)
				{
					front=0;
				}
				rear=(rear+1)%queuesize;
				queueArray[rear]=value;
			}
		}
		void DEQUEUE()
		{
			if(isEmpty())
			{
				cout<<"Queue is Empty"<<endl;
			}
			else
			{
				cout<<endl<<queueArray[front]<<"value is delete from queue"<<endl;
				if(front==rear)//only one item in queue
				{
					front=rear=-1;
				}
				else
				{
					front=(front+1)%queuesize;
				}
			}
		}
		void DISPLAY()
		{
			if(isEmpty())
			{
				cout<<"list is empty"<<endl;
			}
			else
			{
				if(front<=rear)
				{
					cout<<"values in Queue are"<<endl;
						for(int i=front;i<=rear;i++)
				
				}
				else if(front>rear)
				{
					cout<<"values in Queue are"<<endl;
					for(int i=front;i<=queuesize;i++)
						{
							cout<<queueArray[i]<<"\t"<<endl;
						}
					for(int i=0;i<=rear;i++)
						{
							cout<<queueArray[i]<<"\t"<<endl;
						}
				}		
			
			}
		}
};




#include<iostream>
#include"Circularqueueheader.h"
using namespace std;
int main()
{
	cout<<"****************QUEUE IMPLEMENTATION PROGRAM******************"<<endl;
	int size;
	cout<<"enter size of queue:";
	cin>>size;
	doubleCircularQueue d(size);
	d.ENQUEUE(7.9);
	d.ENQUEUE(21.14);
	d.DISPLAY();
	d.DEQUEUE();
	d.DISPLAY();
	return 0;
}











