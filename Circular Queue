#include<iostream>
using namespace std;
class queue{
    private:
     double *queueArray;
     int queueSize;
     int front;
     int rear;
     int numItems;
    public:
    queue(int size){
        queueArray = new double[size];
        queueSize = size;
        front=-1;
        rear=-1;
        numItems=0;
    }
    ~queue(){
        delete [] queueArray;
    }
    bool isEmpty(){
        if(numItems<=0){
            return true;
        }
        else{
            return false;
        }
    }
    bool isFull(){
        if(numItems==queueSize){
            return true;
        }
        else{
            return false;
        }
    }
    void ENQUEUE(double val){
        if(isFull()){
            cout<<"\n\nQueue is Full\n\n";
        }
        else{
            if(front==-1){
                front=0;
            }
            rear = (rear+1)%queueSize;
            queueArray[rear] = val;
            numItems++;
        }
    }
    void DEQUEUE(){
        if(isEmpty()){
            cout<<"\n\nQueue is Empty\n\n";
        }

        else{
            cout<<"\n\n"<<queueArray[front]<<" has DEQUEUED\n\n";
            if(front==rear){
                front=rear=-1;
            }
            else{
            front = (front+1)%queueSize;
            }
        numItems--;
        }
    }
    void display(){
        if(isEmpty()){
            cout<<"\n\nQueue is Empty\n\n";
        }
        else{
        int i=front;
        do{
        cout<<queueArray[i]<<"\t";
        i=(i+1)%queueSize;
        }while(i!=(rear+1)%queueSize);
        }
    }
}




#include<iostream>
#include"Circularqueueheader.h"
using namespace std;
int main()
{
	cout<<"****************QUEUE IMPLEMENTATION PROGRAM******************"<<endl;
	int size;
	cout<<"enter size of queue:";
	cin>>size;
	doubleCircularQueue d(size);
	d.ENQUEUE(7.9);
	d.ENQUEUE(21.14);
	d.DISPLAY();
	d.DEQUEUE();
	d.DISPLAY();
	return 0;
}











